{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const token = localStorage.getItem('token');\n\n  // If token exists, add to headers\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors (token expired or invalid)\n  if (error.response && error.response.status === 401) {\n    // Remove token from localStorage\n    localStorage.removeItem('token');\n\n    // Redirect to login page if not already there\n    if (window.location.pathname !== '/login') {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// For testing purposes, we'll use mock implementations of the API functions\nconst mockCustomerId = \"customer_123abc\";\nconst mockProviderId = \"provider_456def\";\nconst mockToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImN1c3RvbWVyXzEyM2FiYyIsInJvbGUiOiJjdXN0b21lciIsIm5hbWUiOiJKb2huIERvZSIsImVtYWlsIjoiam9obmRvZUBleGFtcGxlLmNvbSIsImlhdCI6MTYxNjE1MjM5MCwiZXhwIjoxNjE2MjM4NzkwfQ.znkMS3Qq3CnU7Tg0Uby8qoSfMOsxfj9Sr3ByTGPzR4U\";\nconst mockProviderToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InByb3ZpZGVyXzQ1NmRlZiIsInJvbGUiOiJwcm92aWRlciIsIm5hbWUiOiJBQ01FIFRyYXZlbCIsImVtYWlsIjoiY29udGFjdEBhY21ldHJhdmVsLmNvbSIsImlhdCI6MTYxNjE1MjM5MCwiZXhwIjoxNjE2MjM4NzkwfQ.XsxEKGXPsK9nZ7Vd7Eq4SkH3_R5UHJ2dACGZC_i6-XA\";\nexport default api;\n\n// Auth services\nexport const authService = {\n  registerCustomer: data => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/auth/register/customer', data);\n    }\n\n    // Mock implementation for testing\n    console.log(\"Registering customer:\", data);\n    return Promise.resolve({\n      data: {\n        token: mockToken,\n        user: {\n          id: mockCustomerId,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          visibility: data.visibility,\n          role: 'customer'\n        }\n      }\n    });\n  },\n  registerProvider: data => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/auth/register/provider', data);\n    }\n\n    // Mock implementation for testing\n    console.log(\"Registering provider:\", data);\n    return Promise.resolve({\n      data: {\n        token: mockProviderToken,\n        user: {\n          id: mockProviderId,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          transportMode: data.transportMode,\n          role: 'provider'\n        }\n      }\n    });\n  },\n  login: (id, password) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/auth/login', {\n        id,\n        password\n      });\n    }\n\n    // Mock implementation for testing\n    console.log(\"Logging in with ID:\", id, \"and password:\", password);\n\n    // Default test password for mock data\n    const mockPassword = \"password123\";\n    if (id === mockCustomerId && password === mockPassword) {\n      return Promise.resolve({\n        data: {\n          token: mockToken,\n          user: {\n            id: mockCustomerId,\n            firstName: \"John\",\n            lastName: \"Doe\",\n            email: \"johndoe@example.com\",\n            phone: \"1234567890\",\n            visibility: \"public\",\n            role: 'customer'\n          }\n        }\n      });\n    } else if (id === mockProviderId && password === mockPassword) {\n      return Promise.resolve({\n        data: {\n          token: mockProviderToken,\n          user: {\n            id: mockProviderId,\n            name: \"ACME Travel\",\n            email: \"contact@acmetravel.com\",\n            phone: \"9876543210\",\n            transportMode: \"land\",\n            serviceType: \"Transportation\",\n            role: 'provider'\n          }\n        }\n      });\n    } else {\n      return Promise.reject({\n        response: {\n          data: {\n            error: 'Invalid ID or password. Try using \"customer_test\" or \"provider_test\" with password \"password123\"'\n          }\n        }\n      });\n    }\n  }\n};\n\n// Customer services\nexport const customerService = {\n  getProfile: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/auth/profile');\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        id: mockCustomerId,\n        firstName: \"John\",\n        lastName: \"Doe\",\n        email: \"johndoe@example.com\",\n        phone: \"1234567890\",\n        visibility: \"public\"\n      }\n    });\n  },\n  updateProfile: profileData => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put('/auth/profile', profileData);\n    }\n\n    // Mock implementation for testing\n    console.log(\"Updating customer profile:\", profileData);\n    return Promise.resolve({\n      data: {\n        id: mockCustomerId,\n        firstName: profileData.firstName || \"John\",\n        lastName: profileData.lastName || \"Doe\",\n        email: profileData.email || \"johndoe@example.com\",\n        phone: profileData.phone || \"1234567890\",\n        visibility: profileData.visibility || \"public\"\n      }\n    });\n  },\n  changePassword: (oldPassword, newPassword) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put('/auth/change-password', {\n        currentPassword: oldPassword,\n        newPassword\n      });\n    }\n\n    // Mock implementation for testing\n    console.log(\"Changing password from\", oldPassword, \"to\", newPassword);\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Password changed successfully\"\n      }\n    });\n  },\n  getBookings: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/bookings');\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        bookings: [{\n          bookingId: \"booking_1\",\n          providerUserId: mockProviderId,\n          serviceType: \"Hotel\",\n          status: \"confirmed\",\n          transactionHash: \"0x123456789\",\n          bookingDate: \"2023-06-15T10:00:00Z\",\n          serviceDate: \"2023-07-15T10:00:00Z\",\n          amount: 120\n        }]\n      }\n    });\n  },\n  createBooking: (providerId, serviceId, serviceDate) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/bookings', {\n        providerId,\n        serviceId,\n        serviceDate\n      });\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Booking created successfully\",\n        booking: {\n          bookingId: \"new_booking_\" + Date.now(),\n          customerId: mockCustomerId,\n          providerUserId: providerId,\n          serviceId: serviceId,\n          status: \"pending\",\n          transactionHash: \"0x\" + Math.random().toString(16).substring(2, 10) + \"...\",\n          bookingDate: new Date().toISOString(),\n          serviceDate: serviceDate,\n          amount: 150\n        }\n      }\n    });\n  },\n  getWalletInfo: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/wallet');\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        balance: \"500.00\",\n        address: \"0x1234...5678\",\n        transactions: [{\n          id: \"tx1\",\n          type: \"deposit\",\n          amount: \"100.00\",\n          status: \"completed\",\n          timestamp: \"2023-07-15T10:00:00Z\",\n          blockchainTxId: \"0xabcd...1234\"\n        }, {\n          id: \"tx2\",\n          type: \"payment\",\n          amount: \"75.00\",\n          status: \"completed\",\n          description: \"Hotel Booking\",\n          timestamp: \"2023-07-10T14:30:00Z\",\n          blockchainTxId: \"0xefgh...5678\"\n        }, {\n          id: \"tx3\",\n          type: \"withdraw\",\n          amount: \"25.00\",\n          status: \"completed\",\n          timestamp: \"2023-07-05T09:15:00Z\",\n          blockchainTxId: \"0xijkl...9012\"\n        }]\n      }\n    });\n  },\n  depositToWallet: amount => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/wallet/deposit', {\n        amount\n      });\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Deposit successful\",\n        transactionId: \"deposit_\" + Date.now(),\n        blockchainTxId: \"0x\" + Math.random().toString(16).substring(2, 10) + \"...\",\n        amount\n      }\n    });\n  },\n  withdrawFromWallet: amount => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/wallet/withdraw', {\n        amount\n      });\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Withdrawal successful\",\n        transactionId: \"withdraw_\" + Date.now(),\n        blockchainTxId: \"0x\" + Math.random().toString(16).substring(2, 10) + \"...\",\n        amount\n      }\n    });\n  }\n};\n\n// Provider services\nexport const providerService = {\n  getProfile: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/auth/profile');\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        id: mockProviderId,\n        businessName: \"ACME Travel\",\n        email: \"contact@acmetravel.com\",\n        phone: \"9876543210\",\n        transportMode: \"land\",\n        serviceType: \"Transportation\"\n      }\n    });\n  },\n  updateProfile: profileData => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put('/auth/profile', profileData);\n    }\n\n    // Mock implementation for testing\n    console.log(\"Updating provider profile:\", profileData);\n    return Promise.resolve({\n      data: {\n        id: mockProviderId,\n        businessName: profileData.name || \"ACME Travel\",\n        email: profileData.email || \"contact@acmetravel.com\",\n        phone: profileData.phone || \"9876543210\",\n        transportMode: profileData.transportMode || \"land\",\n        serviceType: \"Transportation\"\n      }\n    });\n  },\n  changePassword: (oldPassword, newPassword) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put('/auth/change-password', {\n        currentPassword: oldPassword,\n        newPassword\n      });\n    }\n\n    // Mock implementation for testing\n    console.log(\"Changing password from\", oldPassword, \"to\", newPassword);\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Password changed successfully\"\n      }\n    });\n  },\n  getServices: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/services/provider');\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        services: [{\n          serviceId: \"service_1\",\n          name: \"New York to Boston\",\n          description: \"Comfortable bus ride from NYC to Boston\",\n          price: 120,\n          availability: {\n            startDate: \"2023-06-01T00:00:00Z\",\n            endDate: \"2023-12-31T00:00:00Z\",\n            recurrence: \"daily\"\n          },\n          capacity: 50,\n          isActive: true,\n          category: \"Transportation\"\n        }]\n      }\n    });\n  },\n  createService: serviceData => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/services', serviceData);\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        service: {\n          serviceId: \"service_\" + Math.floor(Math.random() * 1000),\n          name: serviceData.name,\n          description: serviceData.description,\n          price: serviceData.price,\n          availability: serviceData.availability,\n          capacity: serviceData.capacity,\n          isActive: true,\n          category: serviceData.category\n        }\n      }\n    });\n  },\n  updateService: (serviceId, serviceData) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put(`/services/${serviceId}`, serviceData);\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        service: {\n          serviceId: serviceId,\n          name: serviceData.name,\n          description: serviceData.description,\n          price: serviceData.price,\n          availability: serviceData.availability,\n          capacity: serviceData.capacity,\n          isActive: serviceData.isActive\n        }\n      }\n    });\n  },\n  getBookings: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/bookings');\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        bookings: [{\n          bookingId: \"booking_1\",\n          customerUserId: mockCustomerId,\n          serviceId: \"service_1\",\n          status: \"confirmed\",\n          transactionHash: \"0x123456789\",\n          bookingDate: \"2023-06-15T10:00:00Z\",\n          serviceDate: \"2023-07-15T10:00:00Z\",\n          amount: 120\n        }]\n      }\n    });\n  }\n};\n\n// Common services for both roles\nexport const commonService = {\n  searchServices: params => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/services/search', {\n        params\n      });\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        services: [{\n          serviceId: \"service_1\",\n          name: \"Luxury Hotel Stay\",\n          description: \"Experience luxury at its finest with our premium suite accommodation offering stunning views and top-notch amenities.\",\n          price: 200,\n          category: \"Hotel\",\n          provider: {\n            providerId: \"provider_1\",\n            businessName: \"Grand Luxury Hotels\",\n            ratings: {\n              average: 4.8,\n              count: 245\n            }\n          }\n        }, {\n          serviceId: \"service_2\",\n          name: \"City Tour Guide\",\n          description: \"Explore the hidden gems of our city with an experienced local guide who knows all the best spots.\",\n          price: 75,\n          category: \"Tour Guide\",\n          provider: {\n            providerId: \"provider_2\",\n            businessName: \"Local Explorers\",\n            ratings: {\n              average: 4.6,\n              count: 132\n            }\n          }\n        }, {\n          serviceId: \"service_3\",\n          name: \"Airport Transfer\",\n          description: \"Comfortable and reliable transfer from the airport to your accommodation.\",\n          price: 50,\n          category: \"Transportation\",\n          provider: {\n            providerId: \"provider_3\",\n            businessName: \"Swift Transfers\",\n            ratings: {\n              average: 4.7,\n              count: 189\n            }\n          }\n        }]\n      }\n    });\n  },\n  getServiceDetails: serviceId => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get(`/services/${serviceId}`);\n    }\n\n    // Mock implementation for testing\n    const services = {\n      \"service_1\": {\n        serviceId: \"service_1\",\n        name: \"Luxury Hotel Stay\",\n        description: \"Experience luxury at its finest with our premium suite accommodation offering stunning views and top-notch amenities. Each room is designed with comfort and style in mind, featuring king-sized beds, rainfall showers, and high-end toiletries. Enjoy access to our rooftop pool, spa, and fitness center during your stay.\",\n        price: 200,\n        category: \"Hotel\",\n        capacity: 2,\n        availability: {\n          startDate: \"2023-01-01T00:00:00Z\",\n          endDate: \"2023-12-31T00:00:00Z\"\n        },\n        provider: {\n          providerId: \"provider_1\",\n          businessName: \"Grand Luxury Hotels\",\n          serviceType: \"Hotel\",\n          phone: \"+1-555-123-4567\",\n          ratings: {\n            average: 4.8,\n            count: 245\n          }\n        }\n      },\n      \"service_2\": {\n        serviceId: \"service_2\",\n        name: \"City Tour Guide\",\n        description: \"Explore the hidden gems of our city with an experienced local guide who knows all the best spots. Our 4-hour walking tour covers historical landmarks, cultural hotspots, and local favorite eateries. Tours are limited to 8 people to ensure a personalized experience.\",\n        price: 75,\n        category: \"Tour Guide\",\n        capacity: 8,\n        availability: {\n          startDate: \"2023-01-01T00:00:00Z\",\n          endDate: \"2023-12-31T00:00:00Z\"\n        },\n        provider: {\n          providerId: \"provider_2\",\n          businessName: \"Local Explorers\",\n          serviceType: \"Tour Guide\",\n          phone: \"+1-555-987-6543\",\n          ratings: {\n            average: 4.6,\n            count: 132\n          }\n        }\n      },\n      \"service_3\": {\n        serviceId: \"service_3\",\n        name: \"Airport Transfer\",\n        description: \"Comfortable and reliable transfer from the airport to your accommodation. Our professional drivers will meet you at the arrivals hall and help with your luggage. All vehicles are air-conditioned and well-maintained.\",\n        price: 50,\n        category: \"Transportation\",\n        capacity: 4,\n        availability: {\n          startDate: \"2023-01-01T00:00:00Z\",\n          endDate: \"2023-12-31T00:00:00Z\"\n        },\n        provider: {\n          providerId: \"provider_3\",\n          businessName: \"Swift Transfers\",\n          serviceType: \"Transportation\",\n          phone: \"+1-555-789-0123\",\n          ratings: {\n            average: 4.7,\n            count: 189\n          }\n        }\n      }\n    };\n    return Promise.resolve({\n      data: {\n        success: true,\n        service: services[serviceId] || {\n          serviceId: serviceId,\n          name: \"Unknown Service\",\n          description: \"Details not available\",\n          price: 0,\n          category: \"Unknown\",\n          provider: {\n            providerId: \"unknown\",\n            businessName: \"Unknown Provider\",\n            serviceType: \"Unknown\",\n            phone: \"N/A\"\n          }\n        }\n      }\n    });\n  },\n  getBookingDetails: bookingId => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get(`/bookings/${bookingId}`);\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        booking: {\n          bookingId: bookingId,\n          status: \"confirmed\",\n          transactionHash: \"0x123456789\",\n          bookingDate: \"2023-06-15T10:00:00Z\",\n          serviceDate: \"2023-07-15T10:00:00Z\",\n          amount: 120,\n          provider: {\n            id: mockProviderId,\n            businessName: \"ACME Travel\",\n            serviceType: \"Transportation\",\n            phone: \"9876543210\"\n          },\n          customer: {\n            id: mockCustomerId,\n            name: \"John Doe\",\n            phone: \"1234567890\"\n          }\n        },\n        history: [{\n          txId: \"0xabc123\",\n          timestamp: \"2023-06-15T10:00:00Z\",\n          value: {\n            status: \"pending\",\n            updatedBy: \"system\"\n          }\n        }, {\n          txId: \"0xdef456\",\n          timestamp: \"2023-06-16T15:30:00Z\",\n          value: {\n            status: \"confirmed\",\n            updatedBy: \"provider\"\n          }\n        }]\n      }\n    });\n  },\n  updateBookingStatus: (bookingId, status) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put(`/bookings/${bookingId}/status`, {\n        status\n      });\n    }\n\n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: `Booking status updated to ${status}`,\n        booking: {\n          bookingId: bookingId,\n          status: status,\n          updatedAt: new Date().toISOString()\n        }\n      }\n    });\n  }\n};\n\n// Ticket services\nexport const ticketService = {\n  searchTickets: params => api.get('/api/tickets', {\n    params\n  }),\n  getTicketById: id => api.get(`/api/tickets/${id}`),\n  getAvailableSeats: id => api.get(`/api/tickets/${id}/seats`)\n};\n\n// Booking services\nexport const bookingService = {\n  bookTicket: bookingData => api.post('/api/bookings', bookingData),\n  confirmPayment: paymentData => api.post('/api/bookings/payment', paymentData),\n  getBookingById: id => api.get(`/api/bookings/${id}`),\n  cancelBooking: bookingId => api.put(`/api/bookings/${bookingId}/cancel`)\n};\n\n// Payment services\nexport const paymentService = {\n  getWalletBalance: () => api.get('/api/payments/wallet'),\n  initializeWallet: () => api.post('/api/payments/wallet/initialize'),\n  addFunds: amount => api.post('/api/payments/wallet/add-funds', {\n    amount\n  }),\n  processPayment: (bookingId, amount) => api.post('/api/payments/process', {\n    bookingId,\n    amount\n  }),\n  processRefund: (bookingId, amount) => api.post('/api/payments/refund', {\n    bookingId,\n    amount\n  })\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","pathname","href","mockCustomerId","mockProviderId","mockToken","mockProviderToken","authService","registerCustomer","data","REACT_APP_USE_MOCK_API","post","console","log","resolve","user","id","name","email","phone","visibility","role","registerProvider","transportMode","login","password","mockPassword","firstName","lastName","serviceType","customerService","getProfile","get","updateProfile","profileData","put","changePassword","oldPassword","newPassword","currentPassword","success","message","getBookings","bookings","bookingId","providerUserId","transactionHash","bookingDate","serviceDate","amount","createBooking","providerId","serviceId","booking","Date","now","customerId","Math","random","toString","substring","toISOString","getWalletInfo","balance","address","transactions","type","timestamp","blockchainTxId","description","depositToWallet","transactionId","withdrawFromWallet","providerService","businessName","getServices","services","price","availability","startDate","endDate","recurrence","capacity","isActive","category","createService","serviceData","service","floor","updateService","customerUserId","commonService","searchServices","params","provider","ratings","average","count","getServiceDetails","getBookingDetails","customer","history","txId","value","updatedBy","updateBookingStatus","updatedAt","ticketService","searchTickets","getTicketById","getAvailableSeats","bookingService","bookTicket","bookingData","confirmPayment","paymentData","getBookingById","cancelBooking","paymentService","getWalletBalance","initializeWallet","addFunds","processPayment","processRefund"],"sources":["/Users/divya/Documents/Documents/CSE@IITK/2nd sem/Blockchain/Project/MyTravel_Latest.com/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor\napi.interceptors.request.use(\n  (config) => {\n    // Get token from localStorage\n    const token = localStorage.getItem('token');\n    \n    // If token exists, add to headers\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired or invalid)\n    if (error.response && error.response.status === 401) {\n      // Remove token from localStorage\n      localStorage.removeItem('token');\n      \n      // Redirect to login page if not already there\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// For testing purposes, we'll use mock implementations of the API functions\nconst mockCustomerId = \"customer_123abc\";\nconst mockProviderId = \"provider_456def\";\nconst mockToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImN1c3RvbWVyXzEyM2FiYyIsInJvbGUiOiJjdXN0b21lciIsIm5hbWUiOiJKb2huIERvZSIsImVtYWlsIjoiam9obmRvZUBleGFtcGxlLmNvbSIsImlhdCI6MTYxNjE1MjM5MCwiZXhwIjoxNjE2MjM4NzkwfQ.znkMS3Qq3CnU7Tg0Uby8qoSfMOsxfj9Sr3ByTGPzR4U\";\nconst mockProviderToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InByb3ZpZGVyXzQ1NmRlZiIsInJvbGUiOiJwcm92aWRlciIsIm5hbWUiOiJBQ01FIFRyYXZlbCIsImVtYWlsIjoiY29udGFjdEBhY21ldHJhdmVsLmNvbSIsImlhdCI6MTYxNjE1MjM5MCwiZXhwIjoxNjE2MjM4NzkwfQ.XsxEKGXPsK9nZ7Vd7Eq4SkH3_R5UHJ2dACGZC_i6-XA\";\n\nexport default api;\n\n// Auth services\nexport const authService = {\n  registerCustomer: (data) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/auth/register/customer', data);\n    }\n    \n    // Mock implementation for testing\n    console.log(\"Registering customer:\", data);\n    return Promise.resolve({\n      data: {\n        token: mockToken,\n        user: {\n          id: mockCustomerId,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          visibility: data.visibility,\n          role: 'customer'\n        }\n      }\n    });\n  },\n  \n  registerProvider: (data) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/auth/register/provider', data);\n    }\n    \n    // Mock implementation for testing\n    console.log(\"Registering provider:\", data);\n    return Promise.resolve({\n      data: {\n        token: mockProviderToken,\n        user: {\n          id: mockProviderId,\n          name: data.name,\n          email: data.email,\n          phone: data.phone,\n          transportMode: data.transportMode,\n          role: 'provider'\n        }\n      }\n    });\n  },\n  \n  login: (id, password) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/auth/login', { id, password });\n    }\n    \n    // Mock implementation for testing\n    console.log(\"Logging in with ID:\", id, \"and password:\", password);\n    \n    // Default test password for mock data\n    const mockPassword = \"password123\";\n    \n    if (id === mockCustomerId && password === mockPassword) {\n      return Promise.resolve({\n        data: {\n          token: mockToken,\n          user: {\n            id: mockCustomerId,\n            firstName: \"John\",\n            lastName: \"Doe\",\n            email: \"johndoe@example.com\",\n            phone: \"1234567890\",\n            visibility: \"public\",\n            role: 'customer'\n          }\n        }\n      });\n    } else if (id === mockProviderId && password === mockPassword) {\n      return Promise.resolve({\n        data: {\n          token: mockProviderToken,\n          user: {\n            id: mockProviderId,\n            name: \"ACME Travel\",\n            email: \"contact@acmetravel.com\",\n            phone: \"9876543210\",\n            transportMode: \"land\",\n            serviceType: \"Transportation\",\n            role: 'provider'\n          }\n        }\n      });\n    } else {\n      return Promise.reject({ \n        response: { \n          data: { error: 'Invalid ID or password. Try using \"customer_test\" or \"provider_test\" with password \"password123\"' }\n        }\n      });\n    }\n  },\n};\n\n// Customer services\nexport const customerService = {\n  getProfile: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/auth/profile');\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        id: mockCustomerId,\n        firstName: \"John\",\n        lastName: \"Doe\",\n        email: \"johndoe@example.com\",\n        phone: \"1234567890\",\n        visibility: \"public\",\n      }\n    });\n  },\n  \n  updateProfile: (profileData) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put('/auth/profile', profileData);\n    }\n    \n    // Mock implementation for testing\n    console.log(\"Updating customer profile:\", profileData);\n    return Promise.resolve({\n      data: {\n        id: mockCustomerId,\n        firstName: profileData.firstName || \"John\",\n        lastName: profileData.lastName || \"Doe\",\n        email: profileData.email || \"johndoe@example.com\",\n        phone: profileData.phone || \"1234567890\",\n        visibility: profileData.visibility || \"public\",\n      }\n    });\n  },\n  \n  changePassword: (oldPassword, newPassword) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put('/auth/change-password', { currentPassword: oldPassword, newPassword });\n    }\n    \n    // Mock implementation for testing\n    console.log(\"Changing password from\", oldPassword, \"to\", newPassword);\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Password changed successfully\"\n      }\n    });\n  },\n  \n  getBookings: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/bookings');\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        bookings: [\n          {\n            bookingId: \"booking_1\",\n            providerUserId: mockProviderId,\n            serviceType: \"Hotel\",\n            status: \"confirmed\",\n            transactionHash: \"0x123456789\",\n            bookingDate: \"2023-06-15T10:00:00Z\",\n            serviceDate: \"2023-07-15T10:00:00Z\",\n            amount: 120\n          }\n        ]\n      }\n    });\n  },\n  \n  createBooking: (providerId, serviceId, serviceDate) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/bookings', { providerId, serviceId, serviceDate });\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Booking created successfully\",\n        booking: {\n          bookingId: \"new_booking_\" + Date.now(),\n          customerId: mockCustomerId,\n          providerUserId: providerId,\n          serviceId: serviceId,\n          status: \"pending\",\n          transactionHash: \"0x\" + Math.random().toString(16).substring(2, 10) + \"...\",\n          bookingDate: new Date().toISOString(),\n          serviceDate: serviceDate,\n          amount: 150\n        }\n      }\n    });\n  },\n  \n  getWalletInfo: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/wallet');\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        balance: \"500.00\",\n        address: \"0x1234...5678\",\n        transactions: [\n          {\n            id: \"tx1\",\n            type: \"deposit\",\n            amount: \"100.00\",\n            status: \"completed\",\n            timestamp: \"2023-07-15T10:00:00Z\",\n            blockchainTxId: \"0xabcd...1234\"\n          },\n          {\n            id: \"tx2\",\n            type: \"payment\",\n            amount: \"75.00\",\n            status: \"completed\",\n            description: \"Hotel Booking\",\n            timestamp: \"2023-07-10T14:30:00Z\",\n            blockchainTxId: \"0xefgh...5678\"\n          },\n          {\n            id: \"tx3\",\n            type: \"withdraw\",\n            amount: \"25.00\",\n            status: \"completed\",\n            timestamp: \"2023-07-05T09:15:00Z\",\n            blockchainTxId: \"0xijkl...9012\"\n          }\n        ]\n      }\n    });\n  },\n  \n  depositToWallet: (amount) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/wallet/deposit', { amount });\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Deposit successful\",\n        transactionId: \"deposit_\" + Date.now(),\n        blockchainTxId: \"0x\" + Math.random().toString(16).substring(2, 10) + \"...\",\n        amount\n      }\n    });\n  },\n  \n  withdrawFromWallet: (amount) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/wallet/withdraw', { amount });\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Withdrawal successful\",\n        transactionId: \"withdraw_\" + Date.now(),\n        blockchainTxId: \"0x\" + Math.random().toString(16).substring(2, 10) + \"...\",\n        amount\n      }\n    });\n  }\n};\n\n// Provider services\nexport const providerService = {\n  getProfile: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/auth/profile');\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        id: mockProviderId,\n        businessName: \"ACME Travel\",\n        email: \"contact@acmetravel.com\",\n        phone: \"9876543210\",\n        transportMode: \"land\",\n        serviceType: \"Transportation\"\n      }\n    });\n  },\n  \n  updateProfile: (profileData) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put('/auth/profile', profileData);\n    }\n    \n    // Mock implementation for testing\n    console.log(\"Updating provider profile:\", profileData);\n    return Promise.resolve({\n      data: {\n        id: mockProviderId,\n        businessName: profileData.name || \"ACME Travel\",\n        email: profileData.email || \"contact@acmetravel.com\",\n        phone: profileData.phone || \"9876543210\",\n        transportMode: profileData.transportMode || \"land\",\n        serviceType: \"Transportation\"\n      }\n    });\n  },\n  \n  changePassword: (oldPassword, newPassword) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put('/auth/change-password', { currentPassword: oldPassword, newPassword });\n    }\n    \n    // Mock implementation for testing\n    console.log(\"Changing password from\", oldPassword, \"to\", newPassword);\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: \"Password changed successfully\"\n      }\n    });\n  },\n  \n  getServices: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/services/provider');\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        services: [\n          {\n            serviceId: \"service_1\",\n            name: \"New York to Boston\",\n            description: \"Comfortable bus ride from NYC to Boston\",\n            price: 120,\n            availability: {\n              startDate: \"2023-06-01T00:00:00Z\",\n              endDate: \"2023-12-31T00:00:00Z\",\n              recurrence: \"daily\"\n            },\n            capacity: 50,\n            isActive: true,\n            category: \"Transportation\"\n          }\n        ]\n      }\n    });\n  },\n  \n  createService: (serviceData) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.post('/services', serviceData);\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        service: {\n          serviceId: \"service_\" + Math.floor(Math.random() * 1000),\n          name: serviceData.name,\n          description: serviceData.description,\n          price: serviceData.price,\n          availability: serviceData.availability,\n          capacity: serviceData.capacity,\n          isActive: true,\n          category: serviceData.category\n        }\n      }\n    });\n  },\n  \n  updateService: (serviceId, serviceData) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put(`/services/${serviceId}`, serviceData);\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        service: {\n          serviceId: serviceId,\n          name: serviceData.name,\n          description: serviceData.description,\n          price: serviceData.price,\n          availability: serviceData.availability,\n          capacity: serviceData.capacity,\n          isActive: serviceData.isActive\n        }\n      }\n    });\n  },\n  \n  getBookings: () => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/bookings');\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        bookings: [\n          {\n            bookingId: \"booking_1\",\n            customerUserId: mockCustomerId,\n            serviceId: \"service_1\",\n            status: \"confirmed\",\n            transactionHash: \"0x123456789\",\n            bookingDate: \"2023-06-15T10:00:00Z\",\n            serviceDate: \"2023-07-15T10:00:00Z\",\n            amount: 120\n          }\n        ]\n      }\n    });\n  }\n};\n\n// Common services for both roles\nexport const commonService = {\n  searchServices: (params) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get('/services/search', { params });\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        services: [\n          {\n            serviceId: \"service_1\",\n            name: \"Luxury Hotel Stay\",\n            description: \"Experience luxury at its finest with our premium suite accommodation offering stunning views and top-notch amenities.\",\n            price: 200,\n            category: \"Hotel\",\n            provider: {\n              providerId: \"provider_1\",\n              businessName: \"Grand Luxury Hotels\",\n              ratings: {\n                average: 4.8,\n                count: 245\n              }\n            }\n          },\n          {\n            serviceId: \"service_2\",\n            name: \"City Tour Guide\",\n            description: \"Explore the hidden gems of our city with an experienced local guide who knows all the best spots.\",\n            price: 75,\n            category: \"Tour Guide\",\n            provider: {\n              providerId: \"provider_2\",\n              businessName: \"Local Explorers\",\n              ratings: {\n                average: 4.6,\n                count: 132\n              }\n            }\n          },\n          {\n            serviceId: \"service_3\",\n            name: \"Airport Transfer\",\n            description: \"Comfortable and reliable transfer from the airport to your accommodation.\",\n            price: 50,\n            category: \"Transportation\",\n            provider: {\n              providerId: \"provider_3\",\n              businessName: \"Swift Transfers\",\n              ratings: {\n                average: 4.7,\n                count: 189\n              }\n            }\n          }\n        ]\n      }\n    });\n  },\n  \n  getServiceDetails: (serviceId) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get(`/services/${serviceId}`);\n    }\n    \n    // Mock implementation for testing\n    const services = {\n      \"service_1\": {\n        serviceId: \"service_1\",\n        name: \"Luxury Hotel Stay\",\n        description: \"Experience luxury at its finest with our premium suite accommodation offering stunning views and top-notch amenities. Each room is designed with comfort and style in mind, featuring king-sized beds, rainfall showers, and high-end toiletries. Enjoy access to our rooftop pool, spa, and fitness center during your stay.\",\n        price: 200,\n        category: \"Hotel\",\n        capacity: 2,\n        availability: {\n          startDate: \"2023-01-01T00:00:00Z\",\n          endDate: \"2023-12-31T00:00:00Z\"\n        },\n        provider: {\n          providerId: \"provider_1\",\n          businessName: \"Grand Luxury Hotels\",\n          serviceType: \"Hotel\",\n          phone: \"+1-555-123-4567\",\n          ratings: {\n            average: 4.8,\n            count: 245\n          }\n        }\n      },\n      \"service_2\": {\n        serviceId: \"service_2\",\n        name: \"City Tour Guide\",\n        description: \"Explore the hidden gems of our city with an experienced local guide who knows all the best spots. Our 4-hour walking tour covers historical landmarks, cultural hotspots, and local favorite eateries. Tours are limited to 8 people to ensure a personalized experience.\",\n        price: 75,\n        category: \"Tour Guide\",\n        capacity: 8,\n        availability: {\n          startDate: \"2023-01-01T00:00:00Z\",\n          endDate: \"2023-12-31T00:00:00Z\"\n        },\n        provider: {\n          providerId: \"provider_2\",\n          businessName: \"Local Explorers\",\n          serviceType: \"Tour Guide\",\n          phone: \"+1-555-987-6543\",\n          ratings: {\n            average: 4.6,\n            count: 132\n          }\n        }\n      },\n      \"service_3\": {\n        serviceId: \"service_3\",\n        name: \"Airport Transfer\",\n        description: \"Comfortable and reliable transfer from the airport to your accommodation. Our professional drivers will meet you at the arrivals hall and help with your luggage. All vehicles are air-conditioned and well-maintained.\",\n        price: 50,\n        category: \"Transportation\",\n        capacity: 4,\n        availability: {\n          startDate: \"2023-01-01T00:00:00Z\",\n          endDate: \"2023-12-31T00:00:00Z\"\n        },\n        provider: {\n          providerId: \"provider_3\",\n          businessName: \"Swift Transfers\",\n          serviceType: \"Transportation\",\n          phone: \"+1-555-789-0123\",\n          ratings: {\n            average: 4.7,\n            count: 189\n          }\n        }\n      }\n    };\n    \n    return Promise.resolve({\n      data: {\n        success: true,\n        service: services[serviceId] || {\n          serviceId: serviceId,\n          name: \"Unknown Service\",\n          description: \"Details not available\",\n          price: 0,\n          category: \"Unknown\",\n          provider: {\n            providerId: \"unknown\",\n            businessName: \"Unknown Provider\",\n            serviceType: \"Unknown\",\n            phone: \"N/A\"\n          }\n        }\n      }\n    });\n  },\n  \n  getBookingDetails: (bookingId) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.get(`/bookings/${bookingId}`);\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        booking: {\n          bookingId: bookingId,\n          status: \"confirmed\",\n          transactionHash: \"0x123456789\",\n          bookingDate: \"2023-06-15T10:00:00Z\",\n          serviceDate: \"2023-07-15T10:00:00Z\",\n          amount: 120,\n          provider: {\n            id: mockProviderId,\n            businessName: \"ACME Travel\",\n            serviceType: \"Transportation\",\n            phone: \"9876543210\"\n          },\n          customer: {\n            id: mockCustomerId,\n            name: \"John Doe\",\n            phone: \"1234567890\"\n          }\n        },\n        history: [\n          {\n            txId: \"0xabc123\",\n            timestamp: \"2023-06-15T10:00:00Z\",\n            value: { status: \"pending\", updatedBy: \"system\" }\n          },\n          {\n            txId: \"0xdef456\",\n            timestamp: \"2023-06-16T15:30:00Z\",\n            value: { status: \"confirmed\", updatedBy: \"provider\" }\n          }\n        ]\n      }\n    });\n  },\n  \n  updateBookingStatus: (bookingId, status) => {\n    // Use real API if REACT_APP_USE_MOCK_API is not set to true\n    if (process.env.REACT_APP_USE_MOCK_API !== 'true') {\n      return api.put(`/bookings/${bookingId}/status`, { status });\n    }\n    \n    // Mock implementation for testing\n    return Promise.resolve({\n      data: {\n        success: true,\n        message: `Booking status updated to ${status}`,\n        booking: {\n          bookingId: bookingId,\n          status: status,\n          updatedAt: new Date().toISOString()\n        }\n      }\n    });\n  }\n};\n\n// Ticket services\nexport const ticketService = {\n  searchTickets: (params) => api.get('/api/tickets', { params }),\n  getTicketById: (id) => api.get(`/api/tickets/${id}`),\n  getAvailableSeats: (id) => api.get(`/api/tickets/${id}/seats`),\n};\n\n// Booking services\nexport const bookingService = {\n  bookTicket: (bookingData) => api.post('/api/bookings', bookingData),\n  confirmPayment: (paymentData) => api.post('/api/bookings/payment', paymentData),\n  getBookingById: (id) => api.get(`/api/bookings/${id}`),\n  cancelBooking: (bookingId) => api.put(`/api/bookings/${bookingId}/cancel`),\n};\n\n// Payment services\nexport const paymentService = {\n  getWalletBalance: () => api.get('/api/payments/wallet'),\n  initializeWallet: () => api.post('/api/payments/wallet/initialize'),\n  addFunds: (amount) => api.post('/api/payments/wallet/add-funds', { amount }),\n  processPayment: (bookingId, amount) => api.post('/api/payments/process', { bookingId, amount }),\n  processRefund: (bookingId, amount) => api.post('/api/payments/refund', { bookingId, amount }),\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}