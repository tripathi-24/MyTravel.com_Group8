{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request Interceptor - Attach JWT token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response Interceptor - Handle Unauthorized\napi.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    if (window.location.pathname !== '/login') {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Export api instance\nexport default api;\n\n// -----------------------------------\n// ðŸ“š Auth Services\n// -----------------------------------\nexport const authService = {\n  registerCustomer: data => api.post('/auth/register-customer', data),\n  registerProvider: data => api.post('/provider/register', data),\n  login: credentials => api.post('/auth/login', credentials)\n};\n\n// -----------------------------------\n// ðŸ“š Customer Services\n// -----------------------------------\nexport const customerService = {\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: profileData => api.put('/auth/profile', profileData),\n  changePassword: (oldPassword, newPassword) => api.put('/auth/change-password', {\n    currentPassword: oldPassword,\n    newPassword\n  }),\n  getBookings: () => api.get('/bookings'),\n  createBooking: (providerId, serviceId, serviceDate) => api.post('/bookings', {\n    providerId,\n    serviceId,\n    serviceDate\n  }),\n  getWalletInfo: () => api.get('/payments/wallet'),\n  depositToWallet: amount => api.post('/payments/wallet/add-funds', {\n    amount\n  }),\n  withdrawFromWallet: amount => api.post('/payments/wallet/withdraw', {\n    amount\n  })\n};\n\n// -----------------------------------\n// ðŸ“š Provider Services\n// -----------------------------------\nexport const providerService = {\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: profileData => api.put('/auth/profile', profileData),\n  changePassword: (oldPassword, newPassword) => api.put('/auth/change-password', {\n    currentPassword: oldPassword,\n    newPassword\n  }),\n  getServices: () => api.get('/services/provider'),\n  createService: serviceData => api.post('/services', serviceData),\n  updateService: (serviceId, serviceData) => api.put(`/services/${serviceId}`, serviceData),\n  getBookings: () => api.get('/bookings')\n};\n\n// -----------------------------------\n// ðŸ“š Common Services\n// -----------------------------------\nexport const commonService = {\n  searchServices: params => api.get('/services/search', {\n    params\n  }),\n  getServiceDetails: serviceId => api.get(`/services/${serviceId}`),\n  getBookingDetails: bookingId => api.get(`/bookings/${bookingId}`),\n  updateBookingStatus: (bookingId, status) => api.put(`/bookings/${bookingId}/status`, {\n    status\n  })\n};\n\n// -----------------------------------\n// ðŸ“š Ticket Services\n// -----------------------------------\nexport const ticketService = {\n  searchTickets: params => api.get('/tickets', {\n    params\n  }),\n  getTicketById: id => api.get(`/tickets/${id}`),\n  getAvailableSeats: id => api.get(`/tickets/${id}/seats`)\n};\n\n// -----------------------------------\n// ðŸ“š Booking Services\n// -----------------------------------\nexport const bookingService = {\n  bookTicket: bookingData => api.post('/bookings', bookingData),\n  confirmPayment: paymentData => api.post('/bookings/payment', paymentData),\n  getBookingById: id => api.get(`/bookings/${id}`),\n  cancelBooking: bookingId => api.put(`/bookings/${bookingId}/cancel`)\n};\n\n// -----------------------------------\n// ðŸ“š Payment Services\n// -----------------------------------\nexport const paymentService = {\n  getWalletBalance: () => api.get('/payments/wallet'),\n  initializeWallet: () => api.post('/payments/wallet/initialize'),\n  addFunds: amount => api.post('/payments/wallet/add-funds', {\n    amount\n  }),\n  processPayment: (bookingId, amount) => api.post('/payments/process', {\n    bookingId,\n    amount\n  }),\n  processRefund: (bookingId, amount) => api.post('/payments/refund', {\n    bookingId,\n    amount\n  })\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","pathname","href","authService","registerCustomer","data","post","registerProvider","login","credentials","customerService","getProfile","get","updateProfile","profileData","put","changePassword","oldPassword","newPassword","currentPassword","getBookings","createBooking","providerId","serviceId","serviceDate","getWalletInfo","depositToWallet","amount","withdrawFromWallet","providerService","getServices","createService","serviceData","updateService","commonService","searchServices","params","getServiceDetails","getBookingDetails","bookingId","updateBookingStatus","ticketService","searchTickets","getTicketById","id","getAvailableSeats","bookingService","bookTicket","bookingData","confirmPayment","paymentData","getBookingById","cancelBooking","paymentService","getWalletBalance","initializeWallet","addFunds","processPayment","processRefund"],"sources":["/home/divya/mytravel/travel/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:4000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request Interceptor - Attach JWT token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Response Interceptor - Handle Unauthorized\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Export api instance\nexport default api;\n\n// -----------------------------------\n// ðŸ“š Auth Services\n// -----------------------------------\nexport const authService = {\n  registerCustomer: (data) => api.post('/auth/register-customer', data),\n  registerProvider: (data) => api.post('/provider/register', data),\n  login: (credentials) => api.post('/auth/login', credentials),\n};\n\n// -----------------------------------\n// ðŸ“š Customer Services\n// -----------------------------------\nexport const customerService = {\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: (profileData) => api.put('/auth/profile', profileData),\n  changePassword: (oldPassword, newPassword) => api.put('/auth/change-password', { currentPassword: oldPassword, newPassword }),\n  getBookings: () => api.get('/bookings'),\n  createBooking: (providerId, serviceId, serviceDate) => api.post('/bookings', { providerId, serviceId, serviceDate }),\n  getWalletInfo: () => api.get('/payments/wallet'),\n  depositToWallet: (amount) => api.post('/payments/wallet/add-funds', { amount }),\n  withdrawFromWallet: (amount) => api.post('/payments/wallet/withdraw', { amount }),\n};\n\n// -----------------------------------\n// ðŸ“š Provider Services\n// -----------------------------------\nexport const providerService = {\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: (profileData) => api.put('/auth/profile', profileData),\n  changePassword: (oldPassword, newPassword) => api.put('/auth/change-password', { currentPassword: oldPassword, newPassword }),\n  getServices: () => api.get('/services/provider'),\n  createService: (serviceData) => api.post('/services', serviceData),\n  updateService: (serviceId, serviceData) => api.put(`/services/${serviceId}`, serviceData),\n  getBookings: () => api.get('/bookings'),\n};\n\n// -----------------------------------\n// ðŸ“š Common Services\n// -----------------------------------\nexport const commonService = {\n  searchServices: (params) => api.get('/services/search', { params }),\n  getServiceDetails: (serviceId) => api.get(`/services/${serviceId}`),\n  getBookingDetails: (bookingId) => api.get(`/bookings/${bookingId}`),\n  updateBookingStatus: (bookingId, status) => api.put(`/bookings/${bookingId}/status`, { status }),\n};\n\n// -----------------------------------\n// ðŸ“š Ticket Services\n// -----------------------------------\nexport const ticketService = {\n  searchTickets: (params) => api.get('/tickets', { params }),\n  getTicketById: (id) => api.get(`/tickets/${id}`),\n  getAvailableSeats: (id) => api.get(`/tickets/${id}/seats`),\n};\n\n// -----------------------------------\n// ðŸ“š Booking Services\n// -----------------------------------\nexport const bookingService = {\n  bookTicket: (bookingData) => api.post('/bookings', bookingData),\n  confirmPayment: (paymentData) => api.post('/bookings/payment', paymentData),\n  getBookingById: (id) => api.get(`/bookings/${id}`),\n  cancelBooking: (bookingId) => api.put(`/bookings/${bookingId}/cancel`),\n};\n\n// -----------------------------------\n// ðŸ“š Payment Services\n// -----------------------------------\nexport const paymentService = {\n  getWalletBalance: () => api.get('/payments/wallet'),\n  initializeWallet: () => api.post('/payments/wallet/initialize'),\n  addFunds: (amount) => api.post('/payments/wallet/add-funds', { amount }),\n  processPayment: (bookingId, amount) => api.post('/payments/process', { bookingId, amount }),\n  processRefund: (bookingId, amount) => api.post('/payments/refund', { bookingId, amount }),\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}